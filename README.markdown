# Vue User Management App

## Project Overview
This Vue.js application demonstrates user management functionality with login, registration, user edit, and admin search pages. It uses Vue 3, Vite, Vue Router, and AG-Grid for client-side filtering of mock user data. The app includes comprehensive unit and end-to-end (E2E) tests using Playwright, with test reporting and coverage via `monocart-reporter`, inspired by the `playwright-ct-vue` template (https://github.com/cenfun/playwright-ct-vue).

## Purpose
The app showcases:
- User authentication (login/registration)
- User profile editing
- Admin user search with client-side filtering by first name, last name, zip, or city
- Unit and E2E testing with Playwright and coverage reporting
- Modern Vue 3 setup with Vite and Vue Router
- Best practices for component organization and testing

## Project Structure
```
├── src/
│   ├── assets/              # Static assets
│   ├── components/          # Reusable components
│   ├── router/              # Vue Router configuration
│   ├── views/               # Page components
│   ├── data/                # Mock user data
│   ├── App.vue              # Root component
│   ├── main.js              # App entry point
├── tests/                   # Unit tests (Playwright Component Testing)
├── e2eTests/                # E2E tests (Playwright)
├── report/                  # Test reports and coverage
├── playwright-ct.config.js  # Playwright Component Testing config
├── playwright.config.js     # Playwright E2E config
├── vite.config.js           # Vite configuration
├── package.json             # Dependencies and scripts
├── README.md                # Project documentation
```

## Setup Instructions

### Prerequisites
- **Node.js**: Version 18 or higher
- **npm**: Version 8 or higher
- A modern code editor like [VSCode](https://code.visualstudio.com/) with [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) and [TypeScript Vue Plugin](https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin) is recommended.

### Installation
1. **Clone the repository**:
   ```bash
   git clone <repository-url>
   cd vue-user-management
   ```

2. **Install dependencies**:
   ```bash
   npm install
   ```
   This installs all required packages, including `vue`, `vue-router`, `ag-grid-vue3`, `@playwright/experimental-ct-vue`, `@playwright/test`, `monocart-reporter`, and others specified in `package.json`.

3. **Verify setup**:
   Ensure all dependencies are installed correctly by running:
   ```bash
   npm run dev
   ```
   The app should be accessible at `http://localhost:5173`.

### Running the App
- Start the development server:
  ```bash
  npm run dev
  ```
  Access the app at `http://localhost:5173`. Navigate to `/login`, `/register`, `/edit`, or `/admin`. Use default admin credentials: `admin@example.com` / `admin123`.

### Running Tests
- **Unit Tests** (Playwright Component Testing):
  ```bash
  npm run test:unit
  ```
  Runs tests in the `tests/` directory, generating a coverage report in `report/index.html`.

- **E2E Tests** (Playwright):
  ```bash
  npm run test:e2e
  ```
  Runs tests in the `e2eTests/` directory, testing full user flows.

- **View Test Reports**:
  After running `npm run test:unit`, open `report/index.html` in a browser to view the coverage report generated by `monocart-reporter`.

### Linting
- Run ESLint to check and fix code style:
  ```bash
  npm run lint
  ```

## Features
- **Login Page**: Authenticates users against mock data.
- **Registration Page**: Allows new user registration with form validation.
- **User Edit Page**: Enables profile updates for authenticated users.
- **Admin Search Page**: Displays users in an AG-Grid with client-side filtering by first name, last name, zip, or city.
- **Mock Data**: Stored in `src/data/users.json`.
- **Testing**: Unit tests cover component rendering and interactions; E2E tests cover user flows, navigation, and edge cases.
- **Coverage**: Generated using `monocart-reporter` for unit tests.

## Test Coverage Setup
The project uses `monocart-reporter` to generate test coverage reports for unit tests:
- **Configuration**: Defined in `playwright-ct.config.js` with `monocart-reporter` for V8 and Codecov reports.
- **Output**: Reports are saved in `report/index.html` and include LCOV format for CI integration (e.g., Codecov).
- **Coverage Scope**: Includes all source files in `src/` and all entry points, as configured in `playwright-ct.config.js`.

## Troubleshooting
- **Dependency Installation Issues**:
  - Ensure Node.js and npm versions meet the requirements.
  - Clear npm cache: `npm cache clean --force` and retry `npm install`.
  - Check for network issues or package registry availability.
- **Tests Fail to Run**:
  - Verify the Vite server is running for E2E tests (`npm run dev`).
  - Ensure `playwright-ct.config.js` and `playwright.config.js` are correctly configured.
  - Check for port conflicts (default: 3100 for component tests, 5173 for E2E tests).
  - Run `npx playwright install` to install browser binaries.
- **Coverage Report Not Generated**:
  - Ensure `monocart-reporter` is installed (`npm install monocart-reporter -D`).
  - Check `playwright-ct.config.js` for correct `reporter` configuration.
  - Verify tests are running in the `chromium` project, as coverage is Chromium-only.
- **AG-Grid Issues**:
  - Ensure `ag-grid-community` and `ag-grid-vue3` are installed.
  - Check that CSS files (`ag-grid.css` and `ag-theme-alpine.css`) are imported in `AdminSearch.vue`.
- **ESLint Errors**:
  - Run `npm run lint` to fix auto-fixable issues.
  - Ensure ESLint plugins (`eslint-config-plus`, `eslint-plugin-vue`) are installed.
- **General Issues**:
  - Check console logs for errors during `npm run dev` or test execution.
  - Refer to the `playwright-ct-vue` documentation (https://github.com/cenfun/playwright-ct-vue) or Playwright docs (https://playwright.dev/docs/test-components).

## Dependencies
- **Runtime**: `vue`, `vue-router`, `ag-grid-community`, `ag-grid-vue3`
- **Development**: `@playwright/experimental-ct-vue`, `@playwright/test`, `@vitejs/plugin-vue`, `vite`, `monocart-reporter`, `eslint`, `eslint-config-plus`, `eslint-plugin-vue`

## Acknowledgments
This project uses the Playwright component testing setup inspired by https://github.com/cenfun/playwright-ct-vue, with `monocart-reporter` for test coverage reporting.